name: Push Master

#
# A pull request has been merged to master branch (since direct push to master is denied).
# Run linting, unit tests and build before deploying to Docker Hub.
#
# - Image supported architectures -
#
# AMD64 - AMD 64-bit x86 (Most platforms and the default architecture)
# ARM64 - ARM 64-bit (Raspberry Pi 3 and later)
# ARMv7 - ARM 32-bit (Raspberry Pi 2 Model B)
#

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deploy_enabled:
        description: 'Run the merge job and then deploy to Docker Hub'
        required: false
        default: false

jobs:
  test-and-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          #- windows-latest
        include:
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-latest
            os-name: osx
          # - os: windows-latest
          #  os-name: windows
        node_version:
          - '14'
          - '15'
          - '16'
        package_manager:
          - npm
          - yarn
          - pnpm
        target:
          - lint
          - test
          - build
        exclude:
          - os: ubuntu-latest
            node_version: '14'
            package_manager: pnpm
          - os: ubuntu-latest
            node_version: '15'
            package_manager: npm
          - os: ubuntu-latest
            node_version: '15'
            package_manager: yarn
          - os: ubuntu-latest
            node_version: '16'
            package_manager: npm
          - os: ubuntu-latest
            node_version: '16'
            package_manager: yarn
          - os: macos-latest
            node_version: '14'
          - os: macos-latest
            node_version: '15'
          - os: macos-latest
            package_manager: yarn
          - os: macos-latest
            package_manager: pnpm
      fail-fast: false

    name: ${{ matrix.os-name }}.v${{ matrix.node_version }}/${{ matrix.package_manager }} - ${{ matrix.target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install packages
        run: |
          cd project
          yarn install --prefer-offline --non-interactive

      - name: Cleanup
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          # Workaround to provide additional free space for testing.
          # https://github.com/actions/virtual-environments/issues/2840
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get install lsof
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Install PNPM
        if: ${{ matrix.package_manager == 'pnpm' }}
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.9.1

      - name: Install applesimutils, reset ios simulators
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew tap wix/brew >/dev/null
          brew install applesimutils
          xcrun simctl shutdown all && xcrun simctl erase all

      - name: Run affected ${{ matrix.target }}
        run: |
          cd project
          yarn nx affected --target=${{ matrix.target }} --parallel
        env:
          NODE_OPTIONS: --max_old_space_size=8192

      - name: Publish coverage
        if: ${{ matrix.target == 'test' && matrix.os-name == 'ubuntu' && matrix.node_version == '14' }}
        uses: codecov/codecov-action@v2.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./project/coverage

  deploy:
    name: Deploy to Docker Hub
    needs: test-and-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./project
          file: ./project/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  report:
    if: ${{ always() && github.repository_owner == 'trekkilabs' && github.event_name != 'workflow_dispatch' }}
    needs: deploy
    runs-on: ubuntu-latest
    name: Report status
    steps:
      - name: Send notification
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ needs.deploy.result }}
          message_format: '{emoji} *{workflow}* {status_message} (last commit <{commit_url}|{commit_sha}>)'
          notification_title: '{workflow} has {status_message}'
          footer: '<{run_url}|View Run>'
          mention_users: 'U012ACMUZHS'
          mention_users_when: 'failure,warnings'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
